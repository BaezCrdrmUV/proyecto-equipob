@page
@model RegisterAccountModel
@{
    ViewData["Title"] = "Register";
}



<body style="background-color: #292929;" >
  <div>
    <h1 style="align-items: top; margin-left: 45%; font-size:31px;">Registro Usuario</h1>
  </div>
  
<form method="POST" id="registerAccount">
  <div class="container" style="margin-top: 2%;">
        <label for="uname" class="label" style ="margin-left: 32.65%;"><b>*Apodo :</b></label>
        <input  type="text" placeholder="Ingrese usuario" name="username" minlenght="5" maxlength="30" id="usernameInput" required>

        <label for="email" class="label" style ="margin-left: 32.8%;"><b>*Correo:</b></label>
        <input type="text" placeholder="Ingrese su correo" minlenght="5" maxlength="100" name="correo" required id="mailInput">

        <label for="psw" class="label" style ="margin-left: 30.4%;"><b>*Contraseña:</b></label>
        <input type="password" style="color: white;" placeholder="Ingrese su contraseña" name="password" minlenght="5" maxLength="20" id="passwordInput" required >

        <label for="psw" class="label" style ="margin-left: 25%;"><b>*Confirmar contraseña:</b></label>
        <input type="password" style="color: white;" placeholder="Confirme su contraseña" name="password" minlenght="5" maxLength="20"id="passwordCheckInput" required> 
        
        </div>
</form>
<button type="submit" style ="margin-left: 30.5%; width: 39%; margin-top: 3%;" id="registerButton" onclick="registernewAccount()">Registrar</button> 
  
<div>
    <label for="errorMessage" class="label" style ="margin-left: 36.5%; color: red;" id="errorMessage"></label>
</div>
    <button type="button" class="cancelbtn" style ="margin-left: 30%; width: 40%; margin-top: 1%;" id="cancelButton" onclick="cancelAction()">Cancelar</button>
</body>
<footer style="margin-top: 9.3%;"> 
    <div class="container">
            &copy; 2021 - SpotyMeWeb
    </div>
</footer>



<link rel="stylesheet" href="~/css/SpotyMe.css" />

@section Scripts {

<script> 
    const usernameInput = document.getElementById("usernameInput");
    const mailInput = document.getElementById("mailInput");
    const passwordInput = document.getElementById("passwordInput");
    const passwordCheckInput = document.getElementById("passwordCheckInput");
    const logErrorMessage= document.getElementById("errorMessage");

    function registernewAccount()
    {
        if(usernameInput.value.trim() != "" && passwordInput.value.trim() != ""
        && mailInput.value.trim() != "" && passwordCheckInput.value.trim()!= ""
        && passwordInput.value == passwordCheckInput.value)
        {
            var myHeaders = new Headers();
            myHeaders.append("Content-Type", "application/json");
            var accountInfo = {
                "AccountId" : null,
                "username" : usernameInput.value,
                "email" : mailInput.value,
                "IsUser" : 1,
                "Status" : {
                    "StatusId": 1,
                    "Name": "Activo"
                },
                "Passwords" : [
                    {
                        "PasswordId": null,
                        "PasswordString": hashText(passwordInput.value),
                        "OwnerId": null
                    }
                ]
            }

            let url = "http://localhost:4000/Account/registerNewAccount";
            fetch(url,{
            method: 'POST',
            body: JSON.stringify(accountInfo),
            headers: myHeaders,
            redirect: 'follow'
            }).then(async function(response){
            console.log("Código de respuesta", response.status)
            if(response.status == 200)
            {
                let data = await response.json();
                console.log(data);
                if(data.data.message === "Account registered successfully")
                {
                    debugger;
                    alert("Se ha registrado perfectamente el perfil");
                    window.location.pathname = '/Index'
                }
                else
                {
                    logErrorMessage.innerHTML = data.data.message;
                }
            }
            else
            {
                if(response.status == 500)
                {
                console.error("Error del servidor");
                }
                else
                {
                    console.error("Error de peticion");
                }
            }             
            debugger;
        })
        .catch(function(error){
            console.error(error);
        });
        }
        else
        {
            logErrorMessage.innerHTML = "Algunos campos estan incorrectos y/o vacios, verificar"
        }
    }
    
    function cancelAction()
    {
        window.location.pathname = '/Index'
    }

    function hashText(text) 
    {
        if (typeof text != 'string') {
            throw TypeError('El argumento debe ser una cadena de caracteres.');
        }

        if (!text.length) {
            return null;
        }

        let caracteres = text.split('');

        return caracteres.reduce((h, c) => (h = c.charCodeAt(0) + (h << 6) + (h << 16) - h), 0);
    }

</script>

}
